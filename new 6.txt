properties of arima will work better on a sinusoidal type curves as errors can propogate over periods.

baysian=quantifing risk. branding

statistical rigour


pd.DataFrame({'a': [1,2], 'b': [2,3]})


git log --graph --pretty=oneline --abbrev-commit


Variation Autoencoder: tradeoff between a good probability distribution and reconstructive loss

add Zip to resume

https://otexts.com/fpp2/arima-r.html
Plot the data and identify any unusual observations.
If necessary, transform the data (using a Box-Cox transformation) to stabilise the variance.
If the data are non-stationary, take first differences of the data until the data are stationary.
Examine the ACF/PACF: Is an ARIMA( 
p
,
d
,
0
 ) or ARIMA( 
0
,
d
,
q
 ) model appropriate?
Try your chosen model(s), and use the AICc to search for a better model.
Check the residuals from your chosen model by plotting the ACF of the residuals, and doing a portmanteau test of the residuals. If they do not look like white noise, try a modified model.
Once the residuals look like white noise, calculate forecasts.